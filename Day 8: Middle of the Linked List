Given a non-empty, singly linked list with head node head, return a middle node of linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:

Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).
Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.
Example 2:

Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Note:

The number of nodes in the given list will be between 1 and 100.

Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) 
    {
     ListNode ptr=head;
        int count=0;
        while(ptr!=null)
        {
            count++;
            ptr=ptr.next;
        }
        int a[]=new int[count];
        if(count%2!=0)
            count=(count-1)/2;
        else
            count=count/2;
        
        ListNode ptr1=head;
        int i=0;
        while(ptr1!=null&&i<count)
        {
            a[i]=ptr1.val;
            if(i+1<count)
            ptr1=ptr1.next;
            i++;
        }
        
        
        int A=0;
        ListNode node=head;
        while(A<=i-1)
        {
            node.val=a[A];
            node=node.next;
            A++;
        }
        return node;
    }
}
